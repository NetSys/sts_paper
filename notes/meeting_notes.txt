================ Jan 9th =========================

- "Correspondence checking" is the core intellectual contribution of this work.
   * JRex et. al. have nailed application debugging.
   * Brighten et. al. have nailed data-plane invariant checking (re: virtual packets).
   * We articulate a new problem: failures of the platform itself.
     - It is a global invariant that "the network should (eventually) do what the application tells it to".
     - "Correspondence checking" is a mechanism to detect when that invariant does not hold.
     - Sidenote: correspondence checking is also useful for isolating the cause of the failure.

- "Correspondence check" components: 
   * Assume the control application is correct.
   * Mechanism:
        - (Continuously) feed input views to control application.
        - Record application's output configuration.
        - Allow platform to process output configuration.
        - Sometime later, snapshot state of all layers (call them state_i, where i in {virtual, logical, physical})
        - Define cross-layer translation functions, f(state_j) = derived_state_k
        - Verify that for all j,k,  state_k = derived_state_k = f(state_j)
            * (As an optimization, only need to check that f(state_virtual) = state_physical)
            * (For now, only consider exact flow matches, no wildcards. Later, collaborate with Brighten et. al.)

- Correspondence checking alone is not sufficient:
   * Only verifies a single snapshot (point of time)
   * If developers knew what the problem was a priori, they wouldn't need a debugger
   * Simulator facilitates user's intuitions
       - Complete control over timing + event generation makes it easy to reproduce and trace bugs

- There will always be inconsistencies in the network
    -> Need to filter out invariant violation noise
    * User tracks an error condition over time to differentiate:
       - persistent errors
       - harmless transient errors
       - pernicious transient errors
    *  (3-dimensional diagram of snapshots progressing over time)

- Is a simulator sufficient? (Do we need real network snapshots? A distributed debugger?)       

Action items:
  - Need some form of virtualization from Murphy + Andi before SIGCOMM
      * Scale-out router (BigSwitch)
      * Horizontal slicing (Multi-tenancy)

  - Bug reports/anecdotes would be useful for two reasons: 
     i.) I have no idea what bugs in production SDNs actually look like. Don't need to publish this,
        but would help me get a "visceral" understanding of the abstract concepts we'll be writing about.
     ii.) In section 2, we articulate + motivate the problem (platform bugs). This section might be marginally
        strengthened if we had something more concrete to say than
        "From our experience, virtualization and consistency bugs are the most difficult problems in production SDN deployments today"



